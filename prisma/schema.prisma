generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
  theme    = "dark"
  // disabled = true
}

model applicant {
  applicant_id    Int      @id @default(autoincrement())
  curp            String?  @unique @db.VarChar(18)
  hashed_password String?  @db.VarChar(255)
  is_active       Boolean?
  roles           String[]
  period          String?  @db.VarChar(255)

  general_data                  general_data[]
  applicant_payment_token       applicant_payment_token[]
  applicant_payment_inscription applicant_payment_inscription[]
}

model student {
  student_id      Int      @id @default(autoincrement())
  control_number  String?  @unique @db.VarChar(255)
  hashed_password String?  @db.VarChar(255)
  is_active       Boolean?
  roles           String[]
  period          String?  @db.VarChar(255)

  general_data general_data[]

  student_current_status student_current_status[]

  student_complementary_activities student_complementary_activities[]

  student_current_class         student_current_class[]
  evaluation_response           evaluation_response[]
  student_enrollment            student_enrollment[]
  evaluation_feedback           evaluation_feedback[]
  debts_to_departments          debts_to_departments[]
  student_payment_reinscription student_payment_reinscription[]
}

model reset_password {
  id_reset_password Int      @id @default(autoincrement())
  token             String   @unique @db.VarChar(255)
  userId            String // Can be control_number or teacher_number
  expiration_date   DateTime @db.Timestamp(6)
}

model general_data {
  id_general_data Int @id @default(autoincrement())

  preventive_data       preventive_data[]
  student_personal_data student_personal_data[]
  student_tutor_data    student_tutor_data[]
  student_kardex_plan   student_kardex_plan[]
  scholar_data          scholar_data[]

  applicant        applicant?         @relation(fields: [applicant_id], references: [applicant_id], onDelete: Cascade, onUpdate: Cascade)
  applicant_id     Int?
  student          student?           @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: Cascade)
  student_id       Int?
  last_study_Level last_study_Level[]
}

model preventive_data {
  id_preventive_data     Int     @id @default(autoincrement())
  id_nss                 String? @db.VarChar
  clinic                 String? @db.VarChar
  blood_type             String? @db.VarChar
  allergies              String? @db.VarChar
  disability             String? @db.VarChar
  psychological_problems String? @db.VarChar

  general_data_id Int?          @unique
  general_data    general_data? @relation(fields: [general_data_id], references: [id_general_data], onDelete: Cascade, onUpdate: Cascade)
}

model student_personal_data {
  id_student_personal_data Int       @id @default(autoincrement())
  firstname                String?   @db.VarChar
  lastname                 String?   @db.VarChar
  birthdate                DateTime? @db.Timestamp(6)
  curp                     String?   @db.VarChar

  street_name           String? @db.VarChar
  street_number         String? @db.VarChar
  // city                     String?   @db.VarChar
  state_of_birth        String? @db.VarChar // Estado de nacimiento
  state                 String? @db.VarChar // Estado actual
  municipality_of_birth String? @db.VarChar // Municipio de nacimiento
  home_phone            String? @db.VarChar // Teléfono de domicilio
  mobile_phone          String? @db.VarChar // Teléfono celular
  neighborhood          String? @db.VarChar // Colonia
  company               String? @db.VarChar // Empresa (opcional)
  cp                    String? @db.VarChar
  personal_email        String? @db.VarChar
  schoolar_email        String? @db.VarChar
  civil_status          String? @db.VarChar
  laboral_status        String? @db.VarChar
  rfc                   String? @db.VarChar

  general_data_id Int?          @unique
  general_data    general_data? @relation(fields: [general_data_id], references: [id_general_data], onDelete: Cascade, onUpdate: Cascade)
}

model student_tutor_data {
  id_student_tutor_data Int     @id @default(autoincrement())
  firstname             String? @db.VarChar
  lastname              String? @db.VarChar
  street_name           String? @db.VarChar
  street_number         String? @db.VarChar

  state          String? @db.VarChar // Estado
  neighborhood   String? @db.VarChar // Colonia
  home_phone     String? @db.VarChar // Teléfono de domicilio
  mobile_phone   String? @db.VarChar // Teléfono celular
  cp             String? @db.VarChar
  personal_email String? @db.VarChar
  rfc            String? @db.VarChar // RFC
  workplace      String? @db.VarChar // Empresa

  general_data_id Int?          @unique
  general_data    general_data? @relation(fields: [general_data_id], references: [id_general_data], onDelete: Cascade, onUpdate: Cascade)
}

model scholar_data {
  id_scholar_data     Int     @id @default(autoincrement())
  school_prev         String? @db.VarChar
  graduation_period   String? @db.VarChar
  validate_periods    Boolean
  current_period      String? @db.VarChar
  accumulated_credits Int
  status              String  @db.VarChar
  admission_period    String? @db.VarChar // Periodo de ingreso

  general_data_id Int?          @unique
  general_data    general_data? @relation(fields: [general_data_id], references: [id_general_data], onDelete: Cascade, onUpdate: Cascade)
}

model last_study_Level {
  id_last_study_Level    Int       @id @default(autoincrement())
  provenance_school_name String?   @db.VarChar
  provenance_state       String?   @db.VarChar
  provenence_city        String?   @db.VarChar
  graduation_date        DateTime?
  graduation_score       String?   @db.VarChar
  area                   String?   @db.VarChar

  general_data_id Int?          @unique
  general_data    general_data? @relation(fields: [general_data_id], references: [id_general_data], onDelete: Cascade, onUpdate: Cascade)
}

model session {
  id         BigInt    @id @default(autoincrement())
  user_id    String?   @db.VarChar(255)
  token      String?   @unique @db.VarChar(255)
  expires_at DateTime? @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model teacher {
  teacher_id      Int      @id @default(autoincrement())
  teacher_number  String?  @unique @db.VarChar(255)
  hashed_password String?  @db.VarChar(255)
  is_active       Boolean?
  roles           String[]
  period          String?  @db.VarChar(255)

  job_data              job_data?
  teacher_personal_data teacher_personal_data?

  class_schedule class_schedule[]

  complementary_activity complementary_activity[]
}

model teacher_personal_data {
  id_teacher_personal_data Int     @id @default(autoincrement())
  id_teacher_number        String  @unique @db.VarChar
  firstname                String? @db.VarChar
  lastname                 String? @db.VarChar
  street_name              String? @db.VarChar
  street_number            String? @db.VarChar
  city                     String? @db.VarChar
  cp                       String? @db.VarChar
  personal_email           String? @db.VarChar
  schoolar_email           String? @db.VarChar

  teacher teacher @relation(fields: [id_teacher_number], references: [teacher_number], onDelete: Cascade, onUpdate: Cascade)
}

model job_data {
  id_job_data       Int       @id @default(autoincrement())
  id_teacher_number String    @unique @db.VarChar
  plaza             String?   @db.VarChar
  degree            String?   @db.VarChar
  entry_date        DateTime? @db.Timestamp(6)
  department        String?   @db.VarChar

  teacher teacher @relation(fields: [id_teacher_number], references: [teacher_number], onDelete: Cascade, onUpdate: Cascade)
}

model profile_picture {
  profile_picture_id Int       @id @default(autoincrement())
  user_id            String?   @unique @db.VarChar(255)
  s3_key             String?   @db.VarChar(255)
  upload_date        DateTime? @default(now()) @db.Timestamp(6)
}

model applicant_payment_token {
  id_payment_token             Int       @id @default(autoincrement())
  folio                        String?   @unique @db.VarChar(255)
  pre_application_token        String?   @unique @db.VarChar(255)
  career                       String?   @db.VarChar(255)
  career_model                 String?   @db.VarChar(255)
  pre_application_request_date DateTime? @default(now()) @db.Timestamp(6)
  state                        String?   @db.VarChar(255)

  total_amount_to_pay Decimal? @db.Decimal(10, 2)
  payment_status      Boolean? @db.Boolean
  payment_method      String?  @db.VarChar(255)
  reference_number    String?  @db.VarChar(255)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  applicant_id Int?
  applicant    applicant? @relation(fields: [applicant_id], references: [applicant_id], onDelete: Cascade, onUpdate: Cascade)

  fees_id Int? // Referencia al período
  fees    fees? @relation(fields: [fees_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  examn_applicant examn_applicant[]
}

model examn_applicant {
  id_examn_applicant         Int      @id @default(autoincrement())
  applicant_payment_token_id Int?
  exam_date                  DateTime @db.Timestamp(6)
  examn_status               Boolean  @db.Boolean

  applicant_payment_token applicant_payment_token? @relation(fields: [applicant_payment_token_id], references: [id_payment_token], onDelete: Cascade, onUpdate: Cascade)

  applicant_payment_inscription applicant_payment_inscription[]
}

model applicant_payment_inscription {
  id_payment_inscription   Int       @id @default(autoincrement())
  inscription_token        String?   @unique @db.VarChar(255)
  inscription_request_date DateTime? @default(now()) @db.Timestamp(6)
  state                    String    @db.VarChar(255)
  payment_status           Boolean?  @db.Boolean

  payment_method      String   @db.VarChar(255)
  reference_number    String   @db.VarChar(255)
  total_amount_to_pay Decimal? @db.Decimal(10, 2)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  fees_id Int? // Referencia al período
  fees    fees? @relation(fields: [fees_id], references: [id])

  examn_applicant_id Int?
  examn_applicant    examn_applicant? @relation(fields: [examn_applicant_id], references: [id_examn_applicant], onDelete: Cascade, onUpdate: Cascade)

  applicant_id Int?       @unique
  applicant    applicant? @relation(fields: [applicant_id], references: [applicant_id])
}

model student_payment_reinscription {
  id_student_reinscription   Int       @id @default(autoincrement())
  reinscription_token        String?   @unique @db.VarChar(255)
  reinscription_request_date DateTime? @default(now()) @db.Timestamp(6)
  validation_date            DateTime? @db.Timestamp(6)
  authorization              String?   @db.VarChar(255)

  payment_status Boolean? @db.Boolean

  student_id Int?
  student    student? @relation(fields: [student_id], references: [student_id])

  fees_id Int? // Referencia al período
  fees    fees? @relation(fields: [fees_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model fees {
  id         Int      @id @default(autoincrement())
  fee_type   String // Ejemplo: 'preficha', 'inscripción', 'reinscripción'
  amount     Decimal  @db.Decimal(10, 2) // Monto del costo
  discount   Decimal  @db.Decimal(10, 2) // Descuento a aplicar
  start_date DateTime //Inicio de inscripciones de nuevo ingreso (preficha), inscripciones, reinscripciones,
  semester   String?
  deadline   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  period_id Int // Referencia al período
  period    period @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  applicant_payment_token       applicant_payment_token[]
  applicant_payment_inscription applicant_payment_inscription[]
  debts_to_departments          debts_to_departments[]
  student_payment_reinscription student_payment_reinscription[]
}

model debts_to_departments {
  id_debt_to_department Int     @id @default(autoincrement())
  department            String?
  description           String?
  state                 String?

  student_id Int?
  student    student? @relation(fields: [student_id], references: [student_id])

  fees_id Int? // Referencia al período
  fees    fees? @relation(fields: [fees_id], references: [id])
}

model period {
  id         Int      @id @default(autoincrement())
  name       String // Nombre del período, ej. '2024A'
  start_date DateTime // Fecha de inicio del período
  end_date   DateTime // Fecha de finalización del período
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  fees            fees[]
  evaluation_date evaluation_date[]
}

model carrer {
  id_carrer   Int     @id @default(autoincrement())
  carrer_name String? @db.VarChar
  modality    String? @db.VarChar

  study_plan study_plan[]

  specialities specialities[]

  student_current_status student_current_status[]
}

model study_plan {
  id_study_plan Int     @id @default(autoincrement())
  id_carrer     Int?    @unique @db.Integer
  name          String? @db.VarChar
  // modality        String? @db.VarChar // Modalidad específica (dual, en línea) ?????

  carrer carrer? @relation(fields: [id_carrer], references: [id_carrer], onDelete: Cascade, onUpdate: Cascade)

  student_kardex_plan student_kardex_plan[]

  subject_plan_relation subject_plan_relation[]
}

model subject {
  id_subject        Int     @id @default(autoincrement())
  subject_name      String? @db.VarChar
  theoretical_hours String? @db.VarChar
  practical_hours   Int?    @db.Integer
  credits           Int?    @db.Integer
  syllabus          String  @db.VarChar

  subject_plan_relation subject_plan_relation[]
}

model specialities {
  id_speciality   Int     @id @default(autoincrement())
  carrer_id       Int?
  speciality_name String? @db.VarChar
  duration        Int?    @db.Integer

  carrer carrer? @relation(fields: [carrer_id], references: [id_carrer], onDelete: Cascade, onUpdate: Cascade)

  speciality_subject_plan speciality_subject_plan[]
}

model speciality_subject_plan {
  id_speciality_subject_plan Int  @id @default(autoincrement())
  specialities_id            Int?
  subject_plan_relation_id   Int?

  specialities          specialities?          @relation(fields: [specialities_id], references: [id_speciality], onDelete: Cascade, onUpdate: Cascade)
  subject_plan_relation subject_plan_relation? @relation(fields: [subject_plan_relation_id], references: [id_subject_plan_relation], onDelete: Cascade, onUpdate: Cascade)
}

model subject_plan_relation {
  id_subject_plan_relation Int  @id @default(autoincrement())
  id_study_plan            Int? @db.Integer
  id_subject               Int? @db.Integer
  semester                 Int? @db.Integer

  study_plan study_plan? @relation(fields: [id_study_plan], references: [id_study_plan], onDelete: Cascade, onUpdate: Cascade)
  subject    subject?    @relation(fields: [id_subject], references: [id_subject], onDelete: Cascade, onUpdate: Cascade)

  class_schedule class_schedule[]

  initial_data_subject initial_data_subject[]

  assing_initial_data_subject assing_initial_data_subject[]

  Speciality_Subject_Plan speciality_subject_plan[]
}

model student_kardex_plan {
  id_kardex        Int      @id @default(autoincrement())
  id_study_plan    Int?
  id_plan_relation Int?     @db.Integer // ???????????
  complete         Boolean? @db.Boolean
  end_semester     Int?     @db.Integer

  general_data_id Int?          @unique
  general_data    general_data? @relation(fields: [general_data_id], references: [id_general_data], onDelete: Cascade, onUpdate: Cascade)
  study_plan      study_plan?   @relation(fields: [id_study_plan], references: [id_study_plan], onDelete: Cascade, onUpdate: Cascade)
}

model student_current_class {
  id_current_class  Int  @id @default(autoincrement())
  class_schedule_id Int?
  student_id        Int?

  class_schedule class_schedule? @relation(fields: [class_schedule_id], references: [id_class_schedule], onDelete: Cascade, onUpdate: Cascade)
  student        student?        @relation(fields: [student_id], references: [student_id])

  grades_current      grades_current[]
  evaluation_feedback evaluation_feedback[]
  evaluation_response evaluation_response[]
}

model group {
  id_group   Int     @id @default(autoincrement())
  group_type String  @db.VarChar(1) // Solo permite un carácter
  semester   Int?    @db.Integer
  period     String? @db.VarChar(255)

  class_schedule class_schedule[]
  group_tags     group_tags[]
}

model group_tags {
  id_group_tags Int     @id @default(autoincrement())
  id_group      Int?    @db.Integer
  tag           String? @db.VarChar

  group group? @relation(fields: [id_group], references: [id_group], onDelete: Cascade, onUpdate: Cascade)
}

model class_room {
  id_class_room Int     @id @default(autoincrement())
  room_number   String? @db.VarChar // ejemplo salones a, b, c ... son caracteres. como propuesta podria volver a room_number como string.seri un ejemplo h10
  capacity      Int?    @db.Integer

  class_schedule class_schedule[]
}

model class_schedule {
  id_class_schedule        Int       @id @default(autoincrement())
  group_id                 Int?
  subject_plan_relation_id Int?
  class_room_id            Int?
  teacher_id               Int?
  day_of_week              String?   @db.VarChar(255)
  start_time               DateTime? @db.Timestamp(6)
  end_time                 DateTime? @db.Timestamp(6)
  assing_data_subject_id   Int?

  assing_data_subject assing_data_subject? @relation(fields: [assing_data_subject_id], references: [id_assing_data_subject])

  group                 group?                 @relation(fields: [group_id], references: [id_group])
  subject_plan_relation subject_plan_relation? @relation(fields: [subject_plan_relation_id], references: [id_subject_plan_relation], onDelete: Cascade, onUpdate: Cascade)
  class_room            class_room?            @relation(fields: [class_room_id], references: [id_class_room], onDelete: Cascade, onUpdate: Cascade)
  teacher               teacher?               @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade, onUpdate: Cascade)

  student_current_class student_current_class[]
}

//Data Model Skeleton Default

model initial_data_subject {
  id_initial_data_subject  Int   @id @default(autoincrement())
  subject_plan_relation_id Int?
  characterization         Json? @db.Json
  didactics                Json? @db.Json
  competence_specify       Json? @db.Json
  general_data_subject_id  Int?

  subject_plan_relation subject_plan_relation? @relation(fields: [subject_plan_relation_id], references: [id_subject_plan_relation], onDelete: Cascade, onUpdate: Cascade)

  general_data_subject general_data_subject? @relation(fields: [general_data_subject_id], references: [id_general_data_subject], onDelete: Cascade, onUpdate: Cascade)
  assing_data_subject  assing_data_subject[]
}

model general_data_subject {
  id_general_data_subject Int                       @id @default(autoincrement())
  description_tag         String?                   @db.VarChar
  general_competence_edit general_competence_edit[]

  initial_data_subject initial_data_subject[]
}

model general_competence_edit {
  id_general_competence_edit Int   @id @default(autoincrement())
  description                Json? @db.Json
  topics_and_sub             Json? @db.Json
  activities_learning        Json? @db.Json
  activities_teaching        Json? @db.Json
  competence_generic         Json? @db.Json
  theorical                  Int?  @db.Integer
  practice                   Int?  @db.Integer
  scope_indicators           Json? @db.Json
  value_indicator            Json? @db.Json
  scheduling_tp              Json? @db.Json
  scheduling_tr              Json? @db.Json

  general_data_subject    general_data_subject? @relation(fields: [general_data_subject_id], references: [id_general_data_subject], onDelete: Cascade, onUpdate: Cascade)
  general_data_subject_id Int?
}

//Data Model Skeleton assing
model assing_data_subject {
  id_assing_data_subject  Int  @id @default(autoincrement())
  initial_data_subject_id Int?

  initial_data_subject initial_data_subject? @relation(fields: [initial_data_subject_id], references: [id_initial_data_subject], onDelete: Cascade, onUpdate: Cascade)

  assing_initial_data_subject    assing_initial_data_subject? @relation(fields: [assing_initial_data_subject_id], references: [id_initial_data_subject])
  assing_initial_data_subject_id Int?

  class_schedule class_schedule[]
}

model assing_initial_data_subject {
  id_initial_data_subject        Int   @id @default(autoincrement())
  characterization               Json? @db.Json
  didactics                      Json? @db.Json
  competence_specify             Json? @db.Json
  subject_plan_relation_id       Int?
  assing_general_data_subject_id Int?

  subject_plan_relation subject_plan_relation? @relation(fields: [subject_plan_relation_id], references: [id_subject_plan_relation], onDelete: Cascade, onUpdate: Cascade)

  assing_general_data_subject assing_general_data_subject? @relation(fields: [assing_general_data_subject_id], references: [id_general_data_subject], onDelete: Cascade, onUpdate: Cascade)

  assing_data_subject assing_data_subject[]
}

model assing_general_data_subject {
  id_general_data_subject Int     @id @default(autoincrement())
  description_tag         String? @db.VarChar

  assing_initial_data_subject assing_initial_data_subject[]

  assing_general_competence_edit assing_general_competence_edit[]

  curse_following_grades_themes curse_following_grades_themes[]
}

model assing_general_competence_edit {
  id_general_competence_edit Int   @id @default(autoincrement())
  description                Json? @db.Json
  topics_and_sub             Json? @db.Json
  activities_learning        Json? @db.Json
  activities_teaching        Json? @db.Json
  competence_generic         Json? @db.Json
  theorical                  Int?  @db.Integer
  practice                   Int?  @db.Integer
  scope_indicators           Json? @db.Json
  value_indicator            Json? @db.Json
  scheduling_tp              Json? @db.Json
  scheduling_tr              Json? @db.Json

  assing_general_data_subject    assing_general_data_subject? @relation(fields: [assing_general_data_subject_id], references: [id_general_data_subject], onDelete: Cascade, onUpdate: Cascade)
  assing_general_data_subject_id Int?
}

model curse_following_grades_themes {
  id_curse_following_grades_themes Int  @id @default(autoincrement())
  assing_general_data_subject_id   Int?

  assing_general_data_subject assing_general_data_subject? @relation(fields: [assing_general_data_subject_id], references: [id_general_data_subject], onDelete: Cascade, onUpdate: Cascade)

  grades_current grades_current[]
}

model grades_current {
  id_grades_current                Int     @id @default(autoincrement())
  student_current_class_id         Int?
  curse_following_grades_themes_id Int?
  grade                            Int?    @db.Integer
  faults                           Int?    @db.Integer
  percentage                       String? @db.VarChar(255)

  curse_following_grades_themes curse_following_grades_themes? @relation(fields: [curse_following_grades_themes_id], references: [id_curse_following_grades_themes], onDelete: Cascade, onUpdate: Cascade)

  student_current_class student_current_class? @relation(fields: [student_current_class_id], references: [id_current_class], onDelete: Cascade, onUpdate: Cascade)
}

//  activity complementary & kardex status/ student_current_status

model student_current_status {
  id_status           Int     @id @default(autoincrement())
  student_id          Int?    @db.Integer
  carrer_id           Int?    @db.Integer
  semester            Int?    @db.Integer
  general_average     String? @db.VarChar
  completed_subjects  Int?    @db.Integer
  current_subjects    Int?    @db.Integer
  accumulated_credits Int?    @db.Integer

  student student? @relation(fields: [student_id], references: [student_id])
  carrer  carrer?  @relation(fields: [carrer_id], references: [id_carrer])
}

model complementary_activity {
  id_complementary Int     @id @default(autoincrement())
  activity_name    String? @db.VarChar
  assigned_teacher Int?
  period           String? @db.VarChar
  credits          Int?    @db.Integer

  teacher teacher? @relation(fields: [assigned_teacher], references: [teacher_id])

  student_complementary_activities student_complementary_activities[]
}

model student_complementary_activities {
  id_activity               Int     @id @default(autoincrement())
  student_id                Int?
  complementary_activity_id Int?
  status                    String? @db.VarChar // "In Progress", "Completed"

  student                student?                @relation(fields: [student_id], references: [student_id])
  complementary_activity complementary_activity? @relation(fields: [complementary_activity_id], references: [id_complementary])
}

model evaluation_section {
  section_id   Int    @id @default(autoincrement()) // Identificador único de la sección
  section_name String // Nombre o título de la sección

  questions evaluation_question[] // Relación con las preguntas de esta sección
}

model evaluation_question {
  question_id   Int                   @id @default(autoincrement()) // Identificador único de la pregunta
  question_text String // Texto de la pregunta
  section_id    Int // Relación con la sección de la pregunta
  section       evaluation_section    @relation(fields: [section_id], references: [section_id], onUpdate: Cascade, onDelete: Cascade) // Relación con la sección
  responses     evaluation_response[] // Relación con las respuestas a la pregunta
}

model evaluation {
  evaluation_id Int @id @default(autoincrement())

  evaluation_date_id Int?
  evaluation_date    evaluation_date? @relation(fields: [evaluation_date_id], references: [evaluation_date_id], onUpdate: Cascade, onDelete: Cascade)

  responses evaluation_response[]
  feedbacks evaluation_feedback[] // Relación con los comentarios o retroalimentación
}

model evaluation_date {
  evaluation_date_id Int      @id @default(autoincrement())
  start_date         DateTime @default(now())
  end_date           DateTime @default(now())

  period_id  Int // Referencia al período
  period     period       @relation(fields: [period_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  evaluation evaluation[]
}

model evaluation_response {
  response_id Int @id @default(autoincrement())
  score       Int // Rango permitido: 1 a 5, validación en la aplicación

  evaluation_id            Int
  evaluation               evaluation             @relation(fields: [evaluation_id], references: [evaluation_id], onUpdate: Cascade, onDelete: Cascade)
  question_id              Int
  question                 evaluation_question    @relation(fields: [question_id], references: [question_id], onUpdate: Cascade, onDelete: Cascade)
  student_id               Int
  student                  student                @relation(fields: [student_id], references: [student_id], onUpdate: Cascade, onDelete: Cascade)
  student_current_class_id Int?
  student_current_class    student_current_class? @relation(fields: [student_current_class_id], references: [id_current_class], onDelete: Cascade, onUpdate: Cascade)
}

model evaluation_feedback {
  feedback_id   Int    @id @default(autoincrement())
  feedback_text String // Comentario o retroalimentación

  evaluation_id            Int // Relación con la evaluación
  evaluation               evaluation             @relation(fields: [evaluation_id], references: [evaluation_id], onUpdate: Cascade, onDelete: Cascade)
  student_id               Int
  student                  student                @relation(fields: [student_id], references: [student_id], onUpdate: Cascade, onDelete: Cascade)
  student_current_class_id Int?
  student_current_class    student_current_class? @relation(fields: [student_current_class_id], references: [id_current_class], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now()) // Fecha y hora de creación
  updated_at DateTime @updatedAt // Fecha de última actualización
}

model student_enrollment {
  enrollment_id   Int      @id @default(autoincrement())
  enrollment_date DateTime @db.Timestamp(6)

  student_id Int?
  student    student? @relation(fields: [student_id], references: [student_id], onDelete: Cascade, onUpdate: Cascade)
}
