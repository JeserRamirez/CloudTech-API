generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applicant {
  applicant_id    Int      @id @default(autoincrement())
  curp            String?  @unique @db.VarChar(18)
  hashed_password String?  @db.VarChar(255)
  is_active       Boolean?
  roles           String[]
  period          String?  @db.VarChar(255)
}

model job_data {
  id_teacher_number String    @id @db.VarChar
  plaza             String?   @db.VarChar
  degree            String?   @db.VarChar
  entry_date        DateTime? @db.Timestamp(6)
  department        String?   @db.VarChar
  teacher           teacher   @relation(fields: [id_teacher_number], references: [teacher_number], onDelete: Cascade, onUpdate: Cascade)
}

model preventive_data {
  id_student             String  @id @db.VarChar
  id_nss                 String? @db.VarChar
  clinic                 String? @db.VarChar
  blood_type             String? @db.VarChar
  allergies              String? @db.VarChar
  disability             String? @db.VarChar
  psychological_problems String? @db.VarChar
  student                student @relation(fields: [id_student], references: [control_number], onDelete: Cascade, onUpdate: Cascade)
}

model session {
  id         BigInt    @id @default(autoincrement())
  user_id    String?   @db.VarChar(255)
  token      String?   @unique @db.VarChar(255)
  expires_at DateTime? @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model student {
  student_id            Int                    @id @default(autoincrement())
  control_number        String?                @unique @db.VarChar(255)
  hashed_password       String?                @db.VarChar(255)
  is_active             Boolean?
  roles                 String[]
  period                String?                @db.VarChar(255)
  preventive_data       preventive_data?
  student_personal_data student_personal_data?
  student_tutor_data    student_tutor_data?
}

model student_personal_data {
  id_student     String  @id @db.VarChar
  firstname      String? @db.VarChar
  lastname       String? @db.VarChar
  street_name    String? @db.VarChar
  street_number  String? @db.VarChar
  city           String? @db.VarChar
  cp             String? @db.VarChar
  personal_email String? @db.VarChar
  schoolar_email String? @db.VarChar
  student        student @relation(fields: [id_student], references: [control_number], onDelete: Cascade, onUpdate: Cascade)
}

model student_tutor_data {
  id_student     String  @id @db.VarChar
  firstname      String? @db.VarChar
  lastname       String? @db.VarChar
  street_name    String? @db.VarChar
  street_number  String? @db.VarChar
  city           String? @db.VarChar
  cp             String? @db.VarChar
  personal_email String? @db.VarChar
  phone          String? @db.VarChar
  workplace      String? @db.VarChar
  student        student @relation(fields: [id_student], references: [control_number], onDelete: Cascade, onUpdate: Cascade)
}

model teacher {
  teacher_id            Int                    @id @default(autoincrement())
  teacher_number        String?                @unique @db.VarChar(255)
  hashed_password       String?                @db.VarChar(255)
  is_active             Boolean?
  roles                 String[]
  period                String?                @db.VarChar(255)
  job_data              job_data?
  teacher_personal_data teacher_personal_data?
}

model teacher_personal_data {
  id_teacher_number String  @id @db.VarChar
  firstname         String? @db.VarChar
  lastname          String? @db.VarChar
  street_name       String? @db.VarChar
  street_number     String? @db.VarChar
  city              String? @db.VarChar
  cp                String? @db.VarChar
  personal_email    String? @db.VarChar
  schoolar_email    String? @db.VarChar
  teacher           teacher @relation(fields: [id_teacher_number], references: [teacher_number], onDelete: Cascade, onUpdate: Cascade)
}

model profile_picture {
  profile_picture_id Int       @id @default(autoincrement())
  user_id            String?   @unique @db.VarChar(255)
  s3_key             String?   @db.VarChar(255)
  upload_date        DateTime? @default(now()) @db.Timestamp(6)
}
